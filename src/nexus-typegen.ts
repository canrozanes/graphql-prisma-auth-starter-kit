/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context as ContextModule } from "./context"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginUserInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  ResendEmailConfirmationInput: { // input type
    email: string; // String!
  }
  ResetPasswordInput: { // input type
    newPassword: string; // String!
    token: string; // String!
  }
  SignUpUserInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
  UpdateMyselfInput: { // input type
    email?: string | null; // String
    name?: string | null; // String
    password?: string | null; // String
  }
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MessagePayload: { // root type
    message: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    isEmailConfirmed: boolean; // Boolean!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MessagePayload: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    confirmEmail: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    forgotPassword: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    resendConfirmationEmail: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    resetPassword: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    signUp: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    updateMyself: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    isEmailConfirmed: boolean; // Boolean!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  MessagePayload: { // field return type name
    message: 'String'
  }
  Mutation: { // field return type name
    confirmEmail: 'MessagePayload'
    forgotPassword: 'MessagePayload'
    login: 'AuthPayload'
    resendConfirmationEmail: 'MessagePayload'
    resetPassword: 'MessagePayload'
    signUp: 'MessagePayload'
    updateMyself: 'User'
  }
  Query: { // field return type name
    me: 'User'
    users: 'User'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    isEmailConfirmed: 'Boolean'
    name: 'String'
    role: 'Role'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    confirmEmail: { // args
      token: string; // String!
    }
    forgotPassword: { // args
      email: string; // String!
    }
    login: { // args
      data: NexusGenInputs['LoginUserInput']; // LoginUserInput!
    }
    resendConfirmationEmail: { // args
      data: NexusGenInputs['ResendEmailConfirmationInput']; // ResendEmailConfirmationInput!
    }
    resetPassword: { // args
      data: NexusGenInputs['ResetPasswordInput']; // ResetPasswordInput!
    }
    signUp: { // args
      data: NexusGenInputs['SignUpUserInput']; // SignUpUserInput!
    }
    updateMyself: { // args
      data: NexusGenInputs['UpdateMyselfInput']; // UpdateMyselfInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextModule;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}